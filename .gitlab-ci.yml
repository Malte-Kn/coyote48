image: node:12.18.0-stretch

stages:
    - build
    - dockerize
    - deploy
    

build:
    stage: build
    cache:
        paths:
        - node_modules
    script:
        - npm install
        - npm install -g @angular/cli
        - ng build 
    artifacts:
        paths:
            - dist/




# Job that builds a docker image of the frontend 
# (this will build a docker image with the website files from the build stage before)
dockerize-frontend:
  variables:
    IMAGE_NAME: "project"
  stage: dockerize
  # Use the official docker image
  image: docker:stable
  script:
    # Log into the gitlab docker registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Build the docker image and tag it with a name containing the commit id as well as with the 'lastest'-suffix
    - docker build . --tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA --tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest
    # Push the image and the first tag
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    # Push the second tag (the docker registry recognizes that the image is the same and does not need to be pushed 
    # again)
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest
  only:
    refs: 
      - master
# Frontend deployment job
deploy-frontend:
  variables:
    IMAGE_NAME: "project"
  # include common deployment job settings 
  # (here we make use of anchor mechanism of the YAML format, which basically pastes here everyting defined in 
  # ".deploy-common:" which is referenced by the anchor "common-deployment-settings")
  stage: deploy
  only:
    refs: 
      - master
  # ===================================================================================================================
  # Docker image used by deployment job
  # ===================================================================================================================
  # Use a docker image that ships with the kubernetes command line tool 'kubectl'  
  # (this is a docker image created by one person within the docker community and published to the public docker  
  # registry called docker hub)
  image: lwolf/helm-kubectl-docker:v1.15.3-v2.14.3

  # ===================================================================================================================
  # Deployment commands 
  # ===================================================================================================================
  # (mostly the same for frontend & backend; the only differences are expressed by referring to variables that are set 
  # in the respective jobs)
  script:
 
    # -----------------------------------------------------------------------------------------------------------------
    # Configure access to the lab's kubernetes cluster 
    # -----------------------------------------------------------------------------------------------------------------
    # Note: Here we make use of some environment variables configured by the lab supervisors.
    #       You can see the variables in your gitlab project or group -> "Settings" -> "CI /CD" -> "Variables".
    # -----------------------------------------------------------------------------------------------------------------
    # 1) Add cluster to the configuration of 'kubectl' 
    # 1.1) Configure a new cluster that we give the name 'k8s' and for which we provide the URL for the kubernetes 
    #      cluster's API
    - kubectl config set-cluster k8s --server="${K8S_API_ENDPOINT}"
    # 1.2) Set the kubernetes cluster's public certificate (the certificate is used to ensure a secure connection to  
    #      the kubernetes cluster's API)
    - kubectl config set clusters.k8s.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA}
    # 1.3) Set the credentials that grant us access to the kubernetes cluster's API
    - kubectl config set-credentials gitlab-service-account --token="${K8S_USER_TOKEN}"
    
    # 2) Select the previously configured cluster as the one we want to work with
    # 2.1) Define a context, i.e. choose a previously configured kubernetes cluster and specify the previously 
    #      configured user
    - kubectl config set-context default --cluster=k8s --user=gitlab-service-account
    # 2.2) Activate this context
    - kubectl config use-context default

    # -----------------------------------------------------------------------------------------------------------------
    # Prepare the deployment
    # -----------------------------------------------------------------------------------------------------------------
    # Replace some placeholders in the k8s-deployment.yml using the command line tool 'sed'
    # - Replace "<VERSION>" with the git commit id (stored in the environment variable ${CI_COMMIT_SHORT_SHA})
    # - Replace "<IMAGE>" with the URL of the previously built docker image that is stored in gitlab's docker registry
    - sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" k8s-deployment.yml
    - sed -i "s#<IMAGE>#${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}#g" k8s-deployment.yml
    
    # -----------------------------------------------------------------------------------------------------------------
    # Perform the deployment
    # -----------------------------------------------------------------------------------------------------------------
    - kubectl apply -f k8s-deployment.yml

  # ===================================================================================================================
  # Gitlab CI job cache 
  # ===================================================================================================================
  # Deploy jobs do not need to cache anything, therefore we disable the Gitlab CI cache for the deploy jobs
  cache: {}
  # ===================================================================================================================
  # Gitlab CI job artifacts
  # ===================================================================================================================
  # Deploy jobs do not need any artifacts from previous jobs stored in the gitlab CI's artifact store since the only 
  # artifact we need here is the previously built docker image wich is not stored in gitlab's artifact store but in 
  # gitlab's docker registry. Gitlab CI by default passed all artifacts from previous stages' jobs. So in order to 
  # speed up the continous deployment process, we tell gitlab CI that we do not want the artifacts by specifying an 
  # empty artifact dependency list.
  dependencies: []







